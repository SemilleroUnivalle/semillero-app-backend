name: Construir y Desplegar Docker a EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: "us-east-1"
  ECR_REGISTRY: "897722690560.dkr.ecr.us-east-1.amazonaws.com"
  ECR_REPOSITORY: "api-semillero"
  IMAGE_TAG: "latest"

jobs:
  build-and-push:
    name: Construir y Empujar la Imagen de Docker a ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image (backend)
        run: |
          docker build -f HTTP/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY-backend:$IMAGE_TAG HTTP
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-backend:$IMAGE_TAG

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copiar c√≥digo y archivos a EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/mi-app

      - name: Deploy on EC2 via SSH
        env:
          REGISTRY: ${{ env.ECR_REGISTRY }}
          REPO: ${{ env.ECR_REPOSITORY }}
          TAG: ${{ env.IMAGE_TAG }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd /home/${{ secrets.EC2_USER }}/mi-app
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY
            docker-compose pull || true
            docker-compose down || true
            docker-compose up -d --build
          EOF